#!/usr/bin/env sh

 ######################
## Path Short Hand(s) ##
 ######################
# Shell root.

local pathToZero=$(readlink -f '$0')
echo "\$pathToZero: '$pathToZero'"

# Get shell script root for users running this in there local environment.
if [[ -d "$HOME/shell" ]]; then
	declare -x SHELL_ROOT=$HOME/shell
# Attempt to find shell script root when run from CI/CD runner or any other time that this isn't be sourced to setup
# a user's environment.
else
	# Attempt to find root using $0.
	if [[ -d "$pathToZero/shell" ]]; then
		export SHELL_ROOT=$pathToZero/shell
	elif [[ -d "$pathToZero/src/shell" ]]; then
		export SHELL_ROOT=$pathToZero/src/shell
	elif [[ -d "$pathToZero/../shell" ]]; then
		export SHELL_ROOT=$(readlink -f $pathToZero/../shell)
	elif [[ -d "$pathToZero/../src/shell" ]]; then
		export SHELL_ROOT=$(readlink -f $pathToZero/../src/shell)
	elif [[ -d "$pathToZero/../../shell" ]]; then
		export SHELL_ROOT=$(readlink -f $pathToZero/../../shell)
	elif [[ -d "$pathToZero/../../src/shell" ]]; then
		export SHELL_ROOT=$(readlink -f $pathToZero/../../src/shell)
	elif [[ -d "$pathToZero/../../../shell" ]]; then
		export SHELL_ROOT=$(readlink -f $pathToZero/../../../shell)
	elif [[ -d "$pathToZero/../../../src/shell" ]]; then
		export SHELL_ROOT=$(readlink -f $pathToZero/../../../src/shell)
	elif [[ -d "$pathToZero/../../../../shell" ]]; then
		export SHELL_ROOT=$(readlink -f $pathToZero/../../../../shell)
	elif [[ -d "$pathToZero/../../../../src/shell" ]]; then
		export SHELL_ROOT=$(readlink -f $pathToZero/../../../../src/shell)
	# Attempt to find root using $PWD.
	elif [[ -d "$PWD/shell" ]]; then
		export SHELL_ROOT=$PWD/shell
	elif [[ -d "$PWD/src/shell" ]]; then
		export SHELL_ROOT=$PWD/src/shell
	elif [[ -d "$PWD/../shell" ]]; then
		export SHELL_ROOT=$(readlink -f $PWD/../shell)
	elif [[ -d "$PWD/../src/shell" ]]; then
		export SHELL_ROOT=$(readlink -f $PWD/../src/shell)
	elif [[ -d "$PWD/../../shell" ]]; then
		export SHELL_ROOT=$(readlink -f $PWD/../../shell)
	elif [[ -d "$PWD/../../src/shell" ]]; then
		export SHELL_ROOT=$(readlink -f $PWD/../../src/shell)
	elif [[ -d "$PWD/../../../shell" ]]; then
		export SHELL_ROOT=$(readlink -f $PWD/../../../shell)
	elif [[ -d "$PWD/../../../src/shell" ]]; then
		export SHELL_ROOT=$(readlink -f $PWD/../../../src/shell)
	elif [[ -d "$PWD/../../../../shell" ]]; then
		export SHELL_ROOT=$(readlink -f $PWD/../../../../shell)
	elif [[ -d "$PWD/../../../../src/shell" ]]; then
		export SHELL_ROOT=$(readlink -f $PWD/../../../../src/shell)
	else
		echo "ERROR, couldn't find root of shell scripts."
		exit 1
	fi
fi
echo "\$SHELL_ROOT: '$SHELL_ROOT'"
#cmdOut=$(readlink -f $SHELL_ROOT)
#echo "\$(readlink -f $SHELL_ROOT): '$cmdOut'"
# Shell function(s) root.
declare -x SHELL_FUNCTIONS=$SHELL_ROOT/functions
# Shell function's constant(s).
declare -x SHELL_FUNCTIONS_CONSTANTS=$SHELL_FUNCTIONS/constants

 ###########################
## Global Function(s)/Data ##
 ###########################
## Data ##
# Includes variables relevant to all functions.
source $SHELL_FUNCTIONS/variablesGlobal.sh

## Function(s) ##
# Include output producing/formatting function(s) used by other function(s) in the same/child directories.
#   Note: If location/name of this file changes, update all other *.sh files in the same directory.
alias output=$SHELL_FUNCTIONS/output.sh
# Include shell option checking function used by other function(s) in the same/child directories.
alias checkRequiredOpts=$SHELL_FUNCTIONS/checkRequiredOpts.sh
# Include log function used by other function(s) in the same/child directories.
function log() {
	$SHELL_FUNCTIONS/log.sh "${@}"
}
export -f log
# Include function that backs up local home directory to "external" drive.
alias backUp=$SHELL_FUNCTIONS/backUp.sh

